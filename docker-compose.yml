services:
  phoenixstore:
    build:
      context: .
      target: ${PHOENIXSTORE_ENV}
    ports:
      - "${PHOENIXSTORE_PORT}:${PHOENIXSTORE_PORT}"
      - "${WEBSOCKET_PORT}:${WEBSOCKET_PORT}"
    environment:
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - PORT=${PHOENIXSTORE_PORT}
      - API_URL=${PHOENIXSTORE_API_URL}:${PHOENIXSTORE_PORT}
      - WEBSOCKET_PORT=${WEBSOCKET_PORT}
      - WEBSOCKET_HEARTBEAT_INTERVAL=${WEBSOCKET_HEARTBEAT_INTERVAL}
      - WEBSOCKET_MAX_CLIENTS=${WEBSOCKET_MAX_CLIENTS}
      - WEBSOCKET_PING_TIMEOUT=${WEBSOCKET_PING_TIMEOUT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      # Storage configuration
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - STORAGE_PORT=${STORAGE_PORT}
      - STORAGE_ACCESS_KEY=${STORAGE_ACCESS_KEY}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY}
      - STORAGE_USE_SSL=${STORAGE_USE_SSL}
      - STORAGE_REGION=${STORAGE_REGION}
      - STORAGE_PUBLIC_URL=${STORAGE_PUBLIC_URL}
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    env_file:
      - .env
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}?authSource=admin
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: always

  minio:
    image: minio/minio:latest
    ports:
      - "${STORAGE_PORT}:9000"
      - "${STORAGE_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
      MINIO_REGION: ${STORAGE_REGION}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # MinIO create buckets service
  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${STORAGE_ACCESS_KEY} ${STORAGE_SECRET_KEY};
      /usr/bin/mc mb myminio/phoenixstore;
      /usr/bin/mc anonymous set public myminio/phoenixstore;
      exit 0;
      "

volumes:
  mongodb_data:
  minio_data: